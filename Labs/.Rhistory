prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval], legend.cex = 0.8)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#2288FF", "#FF8822"), pch = 19)
par(mar = c(1,1,3,1))
prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval], legend.cex = 0.8)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#2288FF", "#FF8822"), pch = 19, bty = n)
par(mar = c(1,1,3,1))
prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval], legend.cex = 0.8)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#2288FF", "#FF8822"), pch = 19, bty = "N")
par(mar = c(1,1,3,1))
prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval], legend.cex = 0.8)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#2288FF", "#FF8822"), pch = 19, bty = "n")
legend("bottomleft", legend = c("Heart Disease", "No Heart Disease"), col = c("#2288FF", "#FF8822"), pch = 19, bty = "n")
par(mar = c(1,1,3,1))
prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval], legend.cex = 0.8)
legend("bottomleft", legend = c("Heart Disease", "No Heart Disease"), col = c("#2288FF", "#FF8822"), pch = 19, bty = "n")
prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval])
false_positive_rate = mean(predicted == 1 & actual == 2)
round(false_positive_rate,3)
false_negative_rate = mean(predicted == 2 & actual == 1)
round(false_negative_rate,3)
plot(density(predicted[actuals == 1]), col="#FF8822", main = "Double Density Plot of the Output", lwd = 2, xlab = "Logistic Regression Output")
plot(density(predicted[actual == 1]), col="#FF8822", main = "Double Density Plot of the Output", lwd = 2, xlab = "Logistic Regression Output")
plot(density(as.numeric(predicted[actual == 1])), col="#FF8822", main = "Double Density Plot of the Output", lwd = 2, xlab = "Logistic Regression Output")
lines(density(as.numeric(predicted[actual == 2])), col="#2288FF", lwd = 2)
abline(v = 0.5, untf = FALSE, col="888888", lty = 2)
legend("topleft", legend = c("Heart Disease", "No Heart Disease"), col = c("#FF88FF", "#88FF88"), pch = 19)
fit$cptable
fit$frame
fit$variable.importance
fit$y
fit$ordered
fit$parms
fit$splits
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#FF8822", "22888FF"), pch = 19)
```{r}
plot(density(as.numeric(predicted[actual == 1])), col="#FF8822", main = "Double Density Plot of the Output", lwd = 2, xlab = "Logistic Regression Output")
lines(density(as.numeric(predicted[actual == 2])), col="#2288FF", lwd = 2)
abline(v = 0.5, untf = FALSE, col="888888", lty = 2)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#FF8822", "22888FF"), pch = 19)
plot(density(as.numeric(predicted[actual == 1])), col="#FF8822", main = "Double Density Plot of the Output", lwd = 2, xlab = "Logistic Regression Output")
lines(density(as.numeric(predicted[actual == 2])), col="#2288FF", lwd = 2)
abline(v = 0.5, untf = FALSE, col="888888", lty = 2)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#FF8822", "#22888FF"), pch = 19)
plot(density(as.numeric(predicted[actual == 1])), col="#FF8822", main = "Double Density Plot of the Output", lwd = 2, xlab = "Logistic Regression Output")
lines(density(as.numeric(predicted[actual == 2])), col="#2288FF", lwd = 2)
abline(v = 0.5, untf = FALSE, col="888888", lty = 2)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#FF8822", "#2288FF"), pch = 19)
plot(density(as.numeric(predicted[actual == 1])), col="#FF8822", main = "Double Density Plot of the Output", lwd = 2, xlab = "Logistic Regression Output")
lines(density(as.numeric(predicted[actual == 2])), col="#2288FF", lwd = 2)
abline(v = 0.5, untf = FALSE, col="888888", lty = 2)
legend("topright", legend = c("Heart Disease", "No Heart Disease"), col = c("#FF8822", "#2288FF"), pch = 19, bty ="n")
fit$splits
hist(predicted[actual == 1], main="Output when no heart disease", breaks=10, xlim=c(0,1), ylim=c(0,15), col="#FF88FF", xlab="model predictions")
hist(as.numeric(predicted[actual == 1]), main="Output when no heart disease", breaks=10, xlim=c(0,1), ylim=c(0,15), col="#FF88FF", xlab="model predictions")
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
tr_errs = c()
te_errs = c()
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
tr_errs = c()
te_errs = c()
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs)
lines(tr_sizes, te_errs)
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
tr_errs = c()
te_errs = c()
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF")
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
tr_errs = c()
te_errs = c()
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
tr_errs = c()
te_errs = c()
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
knitr::opts_chunk$set(prompt=TRUE, comment="", echo=TRUE)
library(rpart)
library(rpart.plot)
library(maptree)
# the following utility files can be found attached to the assignment
source("https://raw.githubusercontent.com/grbruns/cst383/master/lin-regr-util.R")
source("https://raw.githubusercontent.com/grbruns/cst383/master/class-util.R")
heart = read.table("https://raw.githubusercontent.com/grbruns/cst383/master/heart.dat", quote = "/")
names(heart) <- c("AGE", "SEX", "CHESTPAIN", "RESTBP", "CHOL",
"SUGAR", "ECG", "MAXHR", "ANGINA", "DEP", "EXERCISE", "FLUOR",
"THAL", "OUTPUT")
names(heart) = tolower(names(heart))
# convert output to factor
heart$output = factor(heart$output)
#str(heart)
#summary(heart)
hist(heart$age, col = "#FF8822", main = "Distribution of Ages in the Data Set", xlab = "Age")
plot(heart$chol, heart$output, col = c("#FF8822"), main = "Cholesterol vs. Heart Disease", xlab = "Cholesterol", ylab = "Output")
# training and test sets
set.seed(132)
split = split_data(heart)
tr_dat = split[[1]]
te_dat = split[[2]]
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat, method="class")
summary(fit)
par(mar = c(1,1,3,1))
prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval])
predicted = predict(fit, te_dat, type="class")
actual = te_dat$output
success_rate = mean(predicted == actual)
round(success_rate,3)
conf_matrix = table(actual, predicted)
conf_matrix
false_positive_rate = mean(predicted == 1 & actual == 2)
round(false_positive_rate,3)
false_negative_rate = mean(predicted == 2 & actual == 1)
round(false_negative_rate,3)
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
tr_errs = c()
te_errs = c()
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
length(tr_actual)
length(tr_predicted)
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
# error on training set
length(tr_predicted)
knitr::opts_chunk$set(prompt=TRUE, comment="", echo=TRUE)
library(rpart)
library(rpart.plot)
library(maptree)
# the following utility files can be found attached to the assignment
source("https://raw.githubusercontent.com/grbruns/cst383/master/lin-regr-util.R")
source("https://raw.githubusercontent.com/grbruns/cst383/master/class-util.R")
heart = read.table("https://raw.githubusercontent.com/grbruns/cst383/master/heart.dat", quote = "/")
names(heart) <- c("AGE", "SEX", "CHESTPAIN", "RESTBP", "CHOL",
"SUGAR", "ECG", "MAXHR", "ANGINA", "DEP", "EXERCISE", "FLUOR",
"THAL", "OUTPUT")
names(heart) = tolower(names(heart))
# convert output to factor
heart$output = factor(heart$output)
#str(heart)
#summary(heart)
hist(heart$age, col = "#FF8822", main = "Distribution of Ages in the Data Set", xlab = "Age")
plot(heart$chol, heart$output, col = c("#FF8822"), main = "Cholesterol vs. Heart Disease", xlab = "Cholesterol", ylab = "Output")
# training and test sets
set.seed(132)
split = split_data(heart)
tr_dat = split[[1]]
te_dat = split[[2]]
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat, method="class")
summary(fit)
par(mar = c(1,1,3,1))
prp(fit, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval])
predicted = predict(fit, te_dat, type="class")
actual = te_dat$output
success_rate = mean(predicted == actual)
round(success_rate,3)
conf_matrix = table(actual, predicted)
conf_matrix
false_positive_rate = mean(predicted == 1 & actual == 2)
round(false_positive_rate,3)
false_negative_rate = mean(predicted == 2 & actual == 1)
round(false_negative_rate,3)
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
tr_errs = c()
te_errs = c()
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
length(te_actual)
length(te_predicted)
te_actual = te_dat$output
tr_actual = tr_dat$output
tr_errs = c()
te_errs = c()
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
tr_errs = c()
te_errs = c()
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
te_actual = te_dat$output
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit = rpart(output ~ .,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
tr_errs = c()
te_errs = c()
te_actual = te_dat$output
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat$output
fit1 = rpart(output ~ .,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit1, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit1, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
tr_errs = c()
te_errs = c()
te_actual = te_dat$output
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$output
fit1 = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit1, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit1, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
tr_errs = c()
te_errs = c()
te_actual = te_dat$output
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$output
fit1 = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit1, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit1, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b", ylim = c(0,1))
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
tr_errs = c()
te_errs = c()
te_actual = te_dat$output
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$output
fit1 = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit1, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit1, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b", ylim = c(0,1), main = "Learning Curve", xlab = "Training Set Size", ylab = "Training Errors")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
legend("topright", legend = c("Test Data", "Training Data"), col = c("#FF8822", "#2288FF"), pch = 19)
tr_errs = c()
te_errs = c()
te_actual = te_dat$output
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$output
fit1 = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit1, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit1, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b", ylim = c(0,1), main = "Learning Curve", xlab = "Training Set Size", ylab = "Training Errors")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
legend("topright", legend = c("Test Data", "Training Data"), col = c("#2288FF", "#FF8822"), pch = 19)
tr_errs = c()
te_errs = c()
te_actual = te_dat$output
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$output
fit1 = rpart(output ~ chestpain + dep + maxhr,data=tr_dat1, method="class")
# error on training set
tr_predicted = predict(fit1, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit1, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b", ylim = c(0,0.5), main = "Learning Curve", xlab = "Training Set Size", ylab = "Training Errors")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
legend("topright", legend = c("Test Data", "Training Data"), col = c("#2288FF", "#FF8822"), pch = 19)
summary(fit = rpart(output ~., data = tr_dat, method = "class"))
fit2 = rpart(output ~., data = tr_dat, method = "class")
summary(fit2)
fit2 = rpart(output ~ chestpain + thal + fluor + maxhr, data = tr_dat, method = "class")
summary(fit2)
par(mar = c(1,1,3,1))
prp(fit2, extra=106, varlen=-10,main="Classification Tree for Model 1",box.col=c("#FF8822", "#2288FF")[fit$frame$yval])
fit2 = rpart(output ~ chestpain + thal + fluor, data = tr_dat, method = "class")
summary(fit2)
fit2 = rpart(output ~ chestpain + thal + fluor, data = tr_dat, method = "class")
summary(fit2)
par(mar = c(1,1,3,1))
prp(fit2, extra=106, varlen=-10,main="Classification Tree for Model 2",box.col=c("#FF8822", "#2288FF")[fit$frame$yval])
predicted = predict(fit, te_dat, type="class")
actual = te_dat$output
success_rate = mean(predicted == actual)
round(success_rate,3)
conf_matrix = table(actual, predicted)
conf_matrix
false_positive_rate = mean(predicted == 1 & actual == 2)
round(false_positive_rate,3)
false_negative_rate = mean(predicted == 2 & actual == 1)
round(false_negative_rate,3)
predicted = predict(fit2, te_dat, type="class")
actual = te_dat$output
success_rate = mean(predicted == actual)
round(success_rate,3)
conf_matrix = table(actual, predicted)
conf_matrix
false_positive_rate = mean(predicted == 1 & actual == 2)
round(false_positive_rate,3)
false_negative_rate = mean(predicted == 2 & actual == 1)
round(false_negative_rate,3)
#summary(fit2)
#summary(fit)
tr_errs = c()
te_errs = c()
te_actual = te_dat$output
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes)
{
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$output
fit2 = rpart(output ~ chestpain + thal + fluor, data = tr_dat1, method = "class")
# error on training set
tr_predicted = predict(fit1, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
# error on test set
te_predicted = predict(fit1, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
}
plot(tr_sizes, tr_errs, col = "#FF8822", type = "b", ylim = c(0,0.5), main = "Learning Curve", xlab = "Training Set Size", ylab = "Training Errors")
lines(tr_sizes, te_errs, col = "#2288FF", type = "b")
legend("topright", legend = c("Test Data", "Training Data"), col = c("#2288FF", "#FF8822"), pch = 19)
