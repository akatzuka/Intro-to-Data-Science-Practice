x2 = runif(200, 0, 1)
x = x2
#@ 2
# Solve problem 1 again, but this time use R function 'runif'.
# Hint: runif(200) gives a vector of length 200 with random
# values between 0 and 1.  Obviously you will need to do
# further processing to turn the output of runif into your
# vector x.
# (assign to x)
x2 = runif(200,0,1)
for (i in x)
{
if (x > 0.5)
{
x2[i] = 1
}
else
{
x2[i] = 0
}
}
#@ 2
# Solve problem 1 again, but this time use R function 'runif'.
# Hint: runif(200) gives a vector of length 200 with random
# values between 0 and 1.  Obviously you will need to do
# further processing to turn the output of runif into your
# vector x.
# (assign to x)
x2 = runif(200,0,1)
for (i in 1:200)
{
if (x > 0.5)
{
x2[i] = 1
}
else
{
x2[i] = 0
}
}
warnings()
x2
#@ 2
# Solve problem 1 again, but this time use R function 'runif'.
# Hint: runif(200) gives a vector of length 200 with random
# values between 0 and 1.  Obviously you will need to do
# further processing to turn the output of runif into your
# vector x.
# (assign to x)
x2 = runif(200,0,1)
for (i in 1:length(x2))
{
if (x > 0.1)
{
x2[i] = 1
}
else
{
x2[i] = 0
}
}
x = x2
#@ 2
# Solve problem 1 again, but this time use R function 'runif'.
# Hint: runif(200) gives a vector of length 200 with random
# values between 0 and 1.  Obviously you will need to do
# further processing to turn the output of runif into your
# vector x.
# (assign to x)
x2 = runif(200,0,1)
for (i in 1:length(x2))
{
if (x[i] > 0.1)
{
x2[i] = 1
}
else
{
x2[i] = 0
}
}
x = x2
x2
#@ 2
# Solve problem 1 again, but this time use R function 'runif'.
# Hint: runif(200) gives a vector of length 200 with random
# values between 0 and 1.  Obviously you will need to do
# further processing to turn the output of runif into your
# vector x.
# (assign to x)
x2 = runif(200,0,1)
for (i in 1:length(x2))
{
if (x2[i] > 0.1)
{
x2[i] = 1
}
else
{
x2[i] = 0
}
}
x = x2
x2
#@ 3
# compute the fraction of "heads" in vector x
# (write an expression)
for (i in 1:length(x))
#@ 3
# compute the fraction of "heads" in vector x
# (write an expression)
for (i in 1:length(x))
{
if (x[i] == 1)
{
heads + 1
}
}
heads/length(x)
#@ 3
# compute the fraction of "heads" in vector x
# (write an expression)
heads
for (i in 1:length(x))
{
if (x[i] == 1)
{
heads + 1
}
}
heads/length(x)
#@ 3
# compute the fraction of "heads" in vector x
# (write an expression)
sum(x[x==1])/length(x)
?replicate
frac = function()
{
z = runif(200,0,1)
for (i in 1:length(z))
{
if (z[i] > 0.1)
{
z[i] = 1
}
else
{
z[i] = 0
}
}
sum(z[z==1])/length(z)
}
y1 =  list(Fractions=replicate(100, frac()))
View(y1)
View(y1)
frac = function()
{
z = runif(200,0,1)
for (i in 1:length(z))
{
if (z[i] > 0.1)
{
z[i] = 1
}
else
{
z[i] = 0
}
}
sum(z[z==1])/length(z)
}
y1 =  replicate(100, frac()))
frac = function()
{
z = runif(200,0,1)
for (i in 1:length(z))
{
if (z[i] > 0.1)
{
z[i] = 1
}
else
{
z[i] = 0
}
}
sum(z[z==1])/length(z)
}
y1 =  replicate(100, frac())
#@ 5
# plot a histogram of the values in y1
# (produce a plot)
plot(hist(y1, col="firebirck"))
#@ 5
# plot a histogram of the values in y1
# (produce a plot)
plot(hist(y1))
#@ 6
# compute a vector y2 that is just like y1, except that in creating y2
# we do 1000 coin flips in each experiment, not 200.
# (assign to y2)
y2 = replicate(100,frac(1000))
frac = function(num_runs)
{
z = runif(num_runs,0,1)
for (i in 1:length(z))
{
if (z[i] > 0.1)
{
z[i] = 1
}
else
{
z[i] = 0
}
}
sum(z[z==1])/length(z)
}
y1 =  replicate(100, frac(200))
#@ 5
# plot a histogram of the values in y1
# (produce a plot)
plot(hist(y1))
#@ 6
# compute a vector y2 that is just like y1, except that in creating y2
# we do 1000 coin flips in each experiment, not 200.
# (assign to y2)
y2 = replicate(100,frac(1000))
??mfrow
#@ 7
# plot histograms for y1 and y2, with the histogram for y1 above
# the plot for y2.  Our lecture notes show how to do this, using
# parameter 'mfrow'.  In both histograms, let the x axis values range from
# 0.85 to 0.95.
# (produce a plot)
plot(mfrow(hist(y1),hist(y2)))
#@ 7
# plot histograms for y1 and y2, with the histogram for y1 above
# the plot for y2.  Our lecture notes show how to do this, using
# parameter 'mfrow'.  In both histograms, let the x axis values range from
# 0.85 to 0.95.
# (produce a plot)
plot(par = mfrow(hist(y1),hist(y2)))
#@ 7
# plot histograms for y1 and y2, with the histogram for y1 above
# the plot for y2.  Our lecture notes show how to do this, using
# parameter 'mfrow'.  In both histograms, let the x axis values range from
# 0.85 to 0.95.
# (produce a plot)
par(mfrow = c(1,2))
hist(y1)
hist(y2)
x = sample(0:1,size = 10000, prob = c(99,1), replace = TRUE)
x
#@ 10
# sort your vector x, so that the 0's appear before the 1's
# (assign to x)
sort(x)
#@ 10
# sort your vector x, so that the 0's appear before the 1's
# (assign to x)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c(95,5), replace = TRUE)
y1
y2 = sample (0:1, size = sum(x == 0), prob = c(2,98), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c(2,98), replace = TRUE)
#@ 13
# create a vector y by concatenating y1 and y2, in that order
# (assign to y)
y = y1 + y2
#@ 13
# create a vector y by concatenating y1 and y2, in that order
# (assign to y)
y = c(y1 + y2)
#@ 13
# create a vector y by concatenating y1 and y2, in that order
# (assign to y)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
View(tests)
View(tests)
ptests = data.frame(tests$predicts = 1)
ptests = data.frame(tests$predicts == "1")
View(ptests)
View(ptests)
ptests = data.frame(tests[tests$predicts == 1])
View(ptests)
View(ptests)
ptests = data.frame(tests[tests$predicts == 1,])
ptests = data.frame(tests[tests$predict == 1,])
View(ptests)
View(ptests)
#@ 16
# compute the fraction of the rows in ptests in which 'actual' is 1
# (write an expression)
sum(ptests[ptests$actual == 1]) / nrow(ptests)
#@ 16
# compute the fraction of the rows in ptests in which 'actual' is 1
# (write an expression)
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
prob_cond_given_pos = function(prod_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 10000, prob = c((100 - (100 * prod_con)), (100 * prod_con)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prod_neg_given_no_cond), (100 - (100 * prod_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
prob_cond_given_pos(0.01,0.95,0.95)
prob_cond_given_pos = function(prod_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 10000, prob = c((100 - (100 * prod_cond)), (100 * prod_cond)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prod_neg_given_no_cond), (100 - (100 * prod_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
prob_cond_given_pos(0.01,0.95,0.95)
prob_cond_given_pos = function(prob_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 10000, prob = c((100 - (100 * prob_cond)), (100 * prob_cond)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prob_neg_given_no_cond), (100 - (100 * prob_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
prob_cond_given_pos(0.01,0.95,0.95)
?sapply
prob
x = c(0.01:0.1)
q = sapply(x, prob_cond_given_pos(x,0.95, 0.95))
?sample
# 1
# You apply to 10 companies for a job, and each company offers
# jobs to 20% of (qualified) applicants.  Compute a sample of
# replies, using 0 for no offer, and 1 for offer.
sample(c(0,1),10,prob = (80,20), replace = TRUE)
# 1
# You apply to 10 companies for a job, and each company offers
# jobs to 20% of (qualified) applicants.  Compute a sample of
# replies, using 0 for no offer, and 1 for offer.
sample(c(0,1),10,prob = c(80,20), replace = TRUE)
# 1
# You apply to 10 companies for a job, and each company offers
# jobs to 20% of (qualified) applicants.  Compute a sample of
# replies, using 0 for no offer, and 1 for offer.
sample(c(0,1),10,prob = c(80,20), replace = TRUE)
# 1
# You apply to 10 companies for a job, and each company offers
# jobs to 20% of (qualified) applicants.  Compute a sample of
# replies, using 0 for no offer, and 1 for offer.
sample(c(0,1),10,prob = c(80,20), replace = TRUE)
# 1
# You apply to 10 companies for a job, and each company offers
# jobs to 20% of (qualified) applicants.  Compute a sample of
# replies, using 0 for no offer, and 1 for offer.
sample(c(0,1),10,prob = c(80,20), replace = TRUE)
??binomial
# 2
# repeat the experiment 10,000 times, and record in a vector
# the number of offers for each experiment
pbinom(c(0,1),10000,prob = c(80,20))
?replicate
# 2
# repeat the experiment 10,000 times, and record in a vector
# the number of offers for each experiment
replicate(10000,(sample(c(0,1),10,prob = c(80,20), replace = TRUE)))
# 1
# You apply to 10 companies for a job, and each company offers
# jobs to 20% of (qualified) applicants.  Compute a sample of
# replies, using 0 for no offer, and 1 for offer.
q1 = sample(c(0,1),10,prob = c(80,20), replace = TRUE)
# 2
# repeat the experiment 10,000 times, and record in a vector
# the number of offers for each experiment
q2 = replicate(10000,(sample(c(0,1),10,prob = c(80,20), replace = TRUE)))
View(q2)
View(q2)
# 2
# repeat the experiment 10,000 times, and record in a vector
# the number of offers for each experiment
q2 = replicate(10000,(sum(sample(c(0,1),10,prob = c(80,20), replace = TRUE))))
q2\
q2
# 3
# plot your vector from 2 as a bar plot, showing for each possible
# value 0-10, the fraction of experiments that resulted in that value
barplot(q2/length(q2))
# 3
# plot your vector from 2 as a bar plot, showing for each possible
# value 0-10, the fraction of experiments that resulted in that value
barplot(table(q2)/length(q2))
?pbinom
?barplot
barplot(table(yoda = 0.02, vader = 0.28, r2d2 = 0.7))
barplot(c(0.02, 0.28, 0.7), c(15, 4, 1) names = c("Yoda", "Vader", "R2D2"))
barplot(c(0.02, 0.28, 0.7), c(15, 4, 1), names = c("Yoda", "Vader", "R2D2"))
?rbinom
l2 = sample(c(15,4,1), 500, prob=c(0.02, 0.28, 0.7), replace=TRUE)
l2 = mean(l2)
q = sapply(x, prob_cond_given_pos(x,0.95, 0.95))
plot(q)
q = sapply(x, 'function(x) prob_cond_given_pos(x,0.95, 0.95)')
x = c(0.01:0.1)
x = seq(0.01,0.1, by=0.01)
q = sapply(x, function(x) prob_cond_given_pos(x,0.95, 0.95))
plot(q)
hist(q)
prob_cond_given_pos = function(prob_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 100000, prob = c((100 - (100 * prob_cond)), (100 * prob_cond)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prob_neg_given_no_cond), (100 - (100 * prob_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
x = seq(0.01,0.1, by=0.01)
q = sapply(x, function(x) prob_cond_given_pos(x,0.95, 0.95))
hist(q)
plot(q)
prob_cond_given_pos = function(prob_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 10000, prob = c((100 - (100 * prob_cond)), (100 * prob_cond)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prob_neg_given_no_cond), (100 - (100 * prob_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
prob_cond_given_pos(0.01,0.95,0.95)
x = seq(0.01,0.1, by=0.01)
q = sapply(x, function(x) prob_cond_given_pos(x,0.95, 0.95))
plot(q)
prob_cond_given_pos = function(prob_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 100000, prob = c((100 - (100 * prob_cond)), (100 * prob_cond)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prob_neg_given_no_cond), (100 - (100 * prob_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
x = seq(0.01,0.1, by=0.01)
q = sapply(x, function(x) prob_cond_given_pos(x,0.95, 0.95))
plot(q)
prob_cond_given_pos = function(prob_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 10000, prob = c((100 - (100 * prob_cond)), (100 * prob_cond)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prob_neg_given_no_cond), (100 - (100 * prob_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
prob_cond_given_pos(0.01,0.95,0.95)
x = seq(0.01,0.1, by=0.01)
q = sapply(x, function(x) prob_cond_given_pos(x,0.95, 0.95))
plot(q)
prob_cond_given_pos = function(prob_cond, prob_pos_given_cond, prob_neg_given_no_cond)
{
x = sample(0:1,size = 100000, prob = c((100 - (100 * prob_cond)), (100 * prob_cond)), replace = TRUE)
x = sort(x)
y1 = sample (0:1, size = sum(x == 0), prob = c((100 * prob_neg_given_no_cond), (100 - (100 * prob_neg_given_no_cond))), replace = TRUE)
y2 = sample (0:1, size = sum(x == 1), prob = c((100 - (100 * prob_pos_given_cond)), (100 * prob_pos_given_cond)), replace = TRUE)
y = c(y1, y2)
tests = data.frame(actual=c(x),predict=c(y))
ptests = data.frame(tests[tests$predict == 1,])
sum(ptests[ptests$actual == 1,]) / nrow(ptests)
}
x = seq(0.01,0.1, by=0.01)
q2 = sapply(x, function(x) prob_cond_given_pos(x,0.95, 0.95))
plot(q2)
frac = function(num_runs)
{
z = runif(num_runs,0,1)
for (i in 1:length(z))
{
if (z[i] > 0.1)
{
z[i] = 1
}
else
{
z[i] = 0
}
}
sum(z[z==1])/length(z)
}
y1 =  replicate(100, frac(200))
plot(hist(y1))
y2 = replicate(100,frac(1000))
par(mfrow = c(2,1))
hist(y1)
hist(y2)
